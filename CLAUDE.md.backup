# CLAUDE.md

This file provides guidance to Claude Code (claude.ai/code) when working with code in this repository.

## Repository Overview

This is a ROS2 workspace for OrbiBot, a mecanum-wheeled mobile robot with autonomous navigation capabilities. The robot features LiDAR, camera, and IMU sensors for perception and mapping.

## Build Commands

```bash
# Build all packages
colcon build

# Build specific package
colcon build --packages-select orbibot_description
colcon build --packages-select orbibot_hardware

# Build with debug symbols
colcon build --cmake-args -DCMAKE_BUILD_TYPE=Debug

# Clean build
rm -rf build/ install/ log/
colcon build
```

## Development Commands

```bash
# Source the workspace
source install/setup.bash

# Launch robot visualization in RViz
ros2 launch orbibot_description display.launch.py

# Check robot description
ros2 run robot_state_publisher robot_state_publisher --ros-args -p robot_description:="$(xacro src/orbibot_description/urdf/orbibot.urdf.xacro)"

# List available topics/services
ros2 topic list
ros2 service list

# Run tests
colcon test
colcon test-result --verbose
```

## Architecture Overview

### ROS2 Packages

**orbibot_description** (ament_cmake)
- Contains complete robot URDF definition with sensors
- Robot specs: 350×250×100mm, 8.5kg, mecanum wheels
- Integrated sensors: RPLIDAR A1, Intel RealSense D435, IMU
- 3D mesh files for wheels and LiDAR visualization
- RViz launch file for visualization

**orbibot_hardware** (ament_python)  
- Hardware interface package (currently skeleton)
- Intended for motor control and sensor interfacing
- Uses Python setuptools build system

### Robot Description Structure

The robot URDF (`src/orbibot_description/urdf/orbibot.urdf.xacro`) defines:
- Main chassis with proper inertial properties
- 4 mecanum wheels with individual joint control
- Sensor mounts and transformations
- Gazebo simulation properties

### Key File Locations

- Robot URDF: `src/orbibot_description/urdf/orbibot.urdf.xacro`
- Launch files: `src/orbibot_description/launch/`
- 3D meshes: `src/orbibot_description/meshes/`
- Hardware interface: `src/orbibot_hardware/` (needs implementation)

## Known Issues

1. **Missing orbibot_msgs dependency** - Referenced in package.xml but not present
2. **URDF mesh typo** - `lidar.STL` should be `lidar.stl` in wheel_right_link
3. **Empty hardware package** - No actual hardware interface implementation
4. **Missing configurations** - No RViz config, parameter files, or robot-specific configs

## Development Notes

- Robot uses standard ROS2 conventions for frame naming
- Sensor data published on standard topics (/scan, /camera/image_raw, /imu/data)
- Mecanum wheel control requires omnidirectional kinematics
- Hardware interface should implement ros2_control framework
- All sensor transforms properly defined in URDF